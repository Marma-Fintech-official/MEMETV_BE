name: Node.js CI with PM2 + Docker

on:
  push:
    branches:
      - testnet

jobs:
  build:
    runs-on: ubuntu-latest
    environment: testnet

    steps:
      # Step 1: Check out the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '16'

      # Step 3: Install dependencies
      - name: Install dependencies
        run: npm install

      # Step 4: Set environment variables
      - name: Set environment variables
        run: |
          echo "DBURL=${{ vars.DBURL }}" >> $GITHUB_ENV
          echo "PORT=${{ vars.PORT }}" >> $GITHUB_ENV
          echo "TELEGRAM_TOKEN=${{ vars.TELEGRAM_TOKEN }}" >> $GITHUB_ENV

      # Step 5: Deploy to EC2
      - name: Deploy to EC2
        env:
          DBURL: ${{ vars.DBURL }}
          PORT: ${{ vars.PORT }}
          TELEGRAM_TOKEN: ${{ vars.TELEGRAM_TOKEN }}
        run: |
          # Configure SSH
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          # Define deployment commands
          DEPLOY_SCRIPT=$(cat << 'EOF'
          set -e

          # Variables
          DEPLOY_DIR=/home/ec2-user/MEMETV_BE
          CONTAINER_NAME=meme-tv
          REPO_URL=https://github.com/Marma-Fintech-official/MEMETV_BE.git

          # Update package index
          sudo yum update -y

          # Install Docker if not installed
          if ! command -v docker &> /dev/null; then
            echo "Docker not found, installing..."
            sudo yum install -y docker
            sudo usermod -a -G docker ec2-user
            sudo systemctl start docker
            sudo systemctl enable docker
          fi

          # Install Git if not installed
          if ! command -v git &> /dev/null; then
              echo "Git not found, installing..."
              sudo yum install -y git
              # Verify git installation
              git --version
          fi

          # Install Node.js and npm if not installed
          if ! command -v node &> /dev/null; then
              echo "Node.js not found, installing..."
              curl -sL https://rpm.nodesource.com/setup_18.x | sudo bash -
              sudo yum install -y nodejs npm
              # Verify installation
              node --version
              npm --version
          fi

          # Install PM2 if not installed
          if ! command -v pm2 &> /dev/null; then
            echo "PM2 not found, installing..."
            sudo npm install -g pm2
          fi

          # Clone or update repository
          if [ ! -d "$DEPLOY_DIR" ]; then
            echo "Cloning repository..."
            git clone $REPO_URL $DEPLOY_DIR
            cd $DEPLOY_DIR && git checkout testnet
          else
            echo "Pulling latest changes..."
            cd $DEPLOY_DIR
            git config pull.rebase false
            git checkout testnet
            git pull origin testnet
          fi

          # Create .env file with environment variables
          cat <<EOT > .env
          DBURL=${{ vars.DBURL }}
          PORT=${{ vars.PORT }}
          TELEGRAM_TOKEN=${{ vars.TELEGRAM_TOKEN }}
          EOT

          # Build Docker image
          echo "Building Docker image..."
          sudo docker build -t $CONTAINER_NAME:${{ github.sha }} .

          # Stop and remove existing container if running
          if [ "$(sudo docker ps -q -f name=$CONTAINER_NAME)" ]; then
            echo "Stopping and removing existing container..."
            sudo docker stop $CONTAINER_NAME
            sudo docker rm $CONTAINER_NAME
          fi

          # Run the Docker container
          echo "Starting Docker container..."
          sudo docker run -d --name $CONTAINER_NAME -p ${{ vars.PORT }}:${{ vars.PORT }} --env-file .env $CONTAINER_NAME:${{ github.sha }}

          echo "Deployment completed successfully!"
          EOF
          )

          # Execute deployment script on EC2
          ssh -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_HOST }} "$DEPLOY_SCRIPT"
